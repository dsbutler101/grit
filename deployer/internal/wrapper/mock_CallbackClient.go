// Code generated by mockery v2.43.0. DO NOT EDIT.

package wrapper

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockCallbackClient is an autogenerated mock type for the CallbackClient type
type MockCallbackClient struct {
	mock.Mock
}

type MockCallbackClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCallbackClient) EXPECT() *MockCallbackClient_Expecter {
	return &MockCallbackClient_Expecter{mock: &_m.Mock}
}

// CheckStatus provides a mock function with given fields: _a0
func (_m *MockCallbackClient) CheckStatus(_a0 context.Context) (Status, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckStatus")
	}

	var r0 Status
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (Status, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) Status); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(Status)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCallbackClient_CheckStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStatus'
type MockCallbackClient_CheckStatus_Call struct {
	*mock.Call
}

// CheckStatus is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockCallbackClient_Expecter) CheckStatus(_a0 interface{}) *MockCallbackClient_CheckStatus_Call {
	return &MockCallbackClient_CheckStatus_Call{Call: _e.mock.On("CheckStatus", _a0)}
}

func (_c *MockCallbackClient_CheckStatus_Call) Run(run func(_a0 context.Context)) *MockCallbackClient_CheckStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCallbackClient_CheckStatus_Call) Return(_a0 Status, _a1 error) *MockCallbackClient_CheckStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCallbackClient_CheckStatus_Call) RunAndReturn(run func(context.Context) (Status, error)) *MockCallbackClient_CheckStatus_Call {
	_c.Call.Return(run)
	return _c
}

// InitForcefulShutdown provides a mock function with given fields: _a0
func (_m *MockCallbackClient) InitForcefulShutdown(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InitForcefulShutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCallbackClient_InitForcefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitForcefulShutdown'
type MockCallbackClient_InitForcefulShutdown_Call struct {
	*mock.Call
}

// InitForcefulShutdown is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockCallbackClient_Expecter) InitForcefulShutdown(_a0 interface{}) *MockCallbackClient_InitForcefulShutdown_Call {
	return &MockCallbackClient_InitForcefulShutdown_Call{Call: _e.mock.On("InitForcefulShutdown", _a0)}
}

func (_c *MockCallbackClient_InitForcefulShutdown_Call) Run(run func(_a0 context.Context)) *MockCallbackClient_InitForcefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCallbackClient_InitForcefulShutdown_Call) Return(_a0 error) *MockCallbackClient_InitForcefulShutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCallbackClient_InitForcefulShutdown_Call) RunAndReturn(run func(context.Context) error) *MockCallbackClient_InitForcefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// InitGracefulShutdown provides a mock function with given fields: _a0
func (_m *MockCallbackClient) InitGracefulShutdown(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InitGracefulShutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCallbackClient_InitGracefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitGracefulShutdown'
type MockCallbackClient_InitGracefulShutdown_Call struct {
	*mock.Call
}

// InitGracefulShutdown is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockCallbackClient_Expecter) InitGracefulShutdown(_a0 interface{}) *MockCallbackClient_InitGracefulShutdown_Call {
	return &MockCallbackClient_InitGracefulShutdown_Call{Call: _e.mock.On("InitGracefulShutdown", _a0)}
}

func (_c *MockCallbackClient_InitGracefulShutdown_Call) Run(run func(_a0 context.Context)) *MockCallbackClient_InitGracefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockCallbackClient_InitGracefulShutdown_Call) Return(_a0 error) *MockCallbackClient_InitGracefulShutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCallbackClient_InitGracefulShutdown_Call) RunAndReturn(run func(context.Context) error) *MockCallbackClient_InitGracefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCallbackClient creates a new instance of MockCallbackClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCallbackClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCallbackClient {
	mock := &MockCallbackClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
