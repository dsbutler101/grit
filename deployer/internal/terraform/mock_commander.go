// Code generated by mockery v2.43.0. DO NOT EDIT.

package terraform

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockCommander is an autogenerated mock type for the commander type
type mockCommander struct {
	mock.Mock
}

type mockCommander_Expecter struct {
	mock *mock.Mock
}

func (_m *mockCommander) EXPECT() *mockCommander_Expecter {
	return &mockCommander_Expecter{mock: &_m.Mock}
}

// exitCode provides a mock function with given fields:
func (_m *mockCommander) exitCode() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for exitCode")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// mockCommander_exitCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'exitCode'
type mockCommander_exitCode_Call struct {
	*mock.Call
}

// exitCode is a helper method to define mock.On call
func (_e *mockCommander_Expecter) exitCode() *mockCommander_exitCode_Call {
	return &mockCommander_exitCode_Call{Call: _e.mock.On("exitCode")}
}

func (_c *mockCommander_exitCode_Call) Run(run func()) *mockCommander_exitCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockCommander_exitCode_Call) Return(_a0 int) *mockCommander_exitCode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCommander_exitCode_Call) RunAndReturn(run func() int) *mockCommander_exitCode_Call {
	_c.Call.Return(run)
	return _c
}

// run provides a mock function with given fields: ctx, cmd, args
func (_m *mockCommander) run(ctx context.Context, cmd string, args ...string) error {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, cmd)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for run")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) error); ok {
		r0 = rf(ctx, cmd, args...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockCommander_run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'run'
type mockCommander_run_Call struct {
	*mock.Call
}

// run is a helper method to define mock.On call
//   - ctx context.Context
//   - cmd string
//   - args ...string
func (_e *mockCommander_Expecter) run(ctx interface{}, cmd interface{}, args ...interface{}) *mockCommander_run_Call {
	return &mockCommander_run_Call{Call: _e.mock.On("run",
		append([]interface{}{ctx, cmd}, args...)...)}
}

func (_c *mockCommander_run_Call) Run(run func(ctx context.Context, cmd string, args ...string)) *mockCommander_run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *mockCommander_run_Call) Return(_a0 error) *mockCommander_run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockCommander_run_Call) RunAndReturn(run func(context.Context, string, ...string) error) *mockCommander_run_Call {
	_c.Call.Return(run)
	return _c
}

// newMockCommander creates a new instance of mockCommander. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockCommander(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockCommander {
	mock := &mockCommander{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
