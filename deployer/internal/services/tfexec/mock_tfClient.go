// Code generated by mockery v2.43.0. DO NOT EDIT.

package tfexec

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockTfClient is an autogenerated mock type for the tfClient type
type mockTfClient struct {
	mock.Mock
}

type mockTfClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockTfClient) EXPECT() *mockTfClient_Expecter {
	return &mockTfClient_Expecter{mock: &_m.Mock}
}

// Apply provides a mock function with given fields: ctx, dir
func (_m *mockTfClient) Apply(ctx context.Context, dir string) error {
	ret := _m.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for Apply")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockTfClient_Apply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Apply'
type mockTfClient_Apply_Call struct {
	*mock.Call
}

// Apply is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
func (_e *mockTfClient_Expecter) Apply(ctx interface{}, dir interface{}) *mockTfClient_Apply_Call {
	return &mockTfClient_Apply_Call{Call: _e.mock.On("Apply", ctx, dir)}
}

func (_c *mockTfClient_Apply_Call) Run(run func(ctx context.Context, dir string)) *mockTfClient_Apply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockTfClient_Apply_Call) Return(_a0 error) *mockTfClient_Apply_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTfClient_Apply_Call) RunAndReturn(run func(context.Context, string) error) *mockTfClient_Apply_Call {
	_c.Call.Return(run)
	return _c
}

// Destroy provides a mock function with given fields: ctx, dir
func (_m *mockTfClient) Destroy(ctx context.Context, dir string) error {
	ret := _m.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockTfClient_Destroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destroy'
type mockTfClient_Destroy_Call struct {
	*mock.Call
}

// Destroy is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
func (_e *mockTfClient_Expecter) Destroy(ctx interface{}, dir interface{}) *mockTfClient_Destroy_Call {
	return &mockTfClient_Destroy_Call{Call: _e.mock.On("Destroy", ctx, dir)}
}

func (_c *mockTfClient_Destroy_Call) Run(run func(ctx context.Context, dir string)) *mockTfClient_Destroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockTfClient_Destroy_Call) Return(_a0 error) *mockTfClient_Destroy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTfClient_Destroy_Call) RunAndReturn(run func(context.Context, string) error) *mockTfClient_Destroy_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: ctx, dir
func (_m *mockTfClient) Init(ctx context.Context, dir string) error {
	ret := _m.Called(ctx, dir)

	if len(ret) == 0 {
		panic("no return value specified for Init")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockTfClient_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type mockTfClient_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - ctx context.Context
//   - dir string
func (_e *mockTfClient_Expecter) Init(ctx interface{}, dir interface{}) *mockTfClient_Init_Call {
	return &mockTfClient_Init_Call{Call: _e.mock.On("Init", ctx, dir)}
}

func (_c *mockTfClient_Init_Call) Run(run func(ctx context.Context, dir string)) *mockTfClient_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockTfClient_Init_Call) Return(_a0 error) *mockTfClient_Init_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockTfClient_Init_Call) RunAndReturn(run func(context.Context, string) error) *mockTfClient_Init_Call {
	_c.Call.Return(run)
	return _c
}

// newMockTfClient creates a new instance of mockTfClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockTfClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockTfClient {
	mock := &mockTfClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
