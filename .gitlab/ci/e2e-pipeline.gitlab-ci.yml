workflow:
  # set a useful name for the pipeline
  name: "E2E ${E2E_TEST_NAME}-${E2E_TEST_VERSION_SKEW} (ID: ${E2E_TEST_ID})"
  auto_cancel:
    # allow everything to be cancelled except destroy
    on_new_commit: interruptible

stages:
  - apply
  - test
  - destroy

include:
  - local: .gitlab/ci/00_common.gitlab-ci.yml

.e2e:base:
  rules:
    - if: $CI_PIPELINE_SOURCE == "parent_pipeline"
  interruptible: true
  variables:
    # Used to tag created runners, name resources and state
    # E2E_TEST_NAME is set in each e2e test scenario
    # `tags` has limited variables but CI_PIPELINE_IID works
    RUNNER_NAME: &runner_name "u${E2E_TEST_ID}-${E2E_TEST_NAME}-${E2E_TEST_VERSION_SKEW}"

.e2e:terraform:base:
  extends:
    - .e2e:base
    - .go-cache
  timeout: 2h
  variables:
    # split timeout between script and after script
    RUNNER_SCRIPT_TIMEOUT: 1h
    RUNNER_AFTER_SCRIPT_TIMEOUT: 1h

    # common E2E tf vars
    TF_VAR_runner_tag: ${RUNNER_NAME}
    TF_VAR_name: ${RUNNER_NAME}
    TF_VAR_gitlab_project_id: ${CI_PROJECT_ID}
    TF_VAR_runner_version_skew: ${E2E_TEST_VERSION_SKEW}
    TF_VAR_runner_version: 17.11.0 # for e2e/google/gke-windows

    # Terraform backend config
    TF_HTTP_ADDRESS: "https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/terraform/state/${RUNNER_NAME}"
    TF_HTTP_LOCK_ADDRESS: ${TF_HTTP_ADDRESS}/lock
    TF_HTTP_UNLOCK_ADDRESS: ${TF_HTTP_ADDRESS}/lock
    TF_HTTP_USERNAME: ${GITLAB_USER_LOGIN}
    TF_HTTP_PASSWORD: ${GITLAB_TOKEN_TERRAFORM}
    TF_HTTP_LOCK_METHOD: POST
    TF_HTTP_UNLOCK_METHOD: DELETE

    FF_TIMESTAMPS: true

  environment:
    name: "e2e-${E2E_TEST_NAME}/${RUNNER_NAME}"


  before_script:
  # if the job is cancelled or fails, run destroy again to clean up
  after_script:
    - if [ "$CI_JOB_STATUS" == "success" ]; then exit 0; fi
    - mage -t 1h terraform:initAndDestroy "${E2E_TEST_DIR}"

e2e:apply:
  stage: apply
  extends:
    - .e2e:terraform:base
  environment:
    auto_stop_in: 3h
    on_stop: e2e:destroy:manual
  script:
    - mage -t 40m terraform:initAndApply "${E2E_TEST_DIR}"
    - mage -t 20m runner:waitForRunners "${RUNNER_NAME}"

e2e:test:
  stage: test
  timeout: 60m
  image: alpine/curl:latest
  extends:
    - .e2e:base
  script:
    - echo "Runner name ${RUNNER_NAME}"
    - eval "$E2E_TEST_SCRIPT"
  tags:
    - *runner_name
  rules:
    - if: $E2E_TEST_POWERSHELL == null

# specific script handling required for powershell
e2e:test:powershell:
  stage: test
  timeout: 60m
  image: registry.gitlab.com/gitlab-org/gitlab-runner/gitlab-runner-helper:x86_64-latest-servercore1809
  extends:
    - .e2e:base
  script:
    - echo "Runner name ${RUNNER_NAME}"
    - Invoke-Expression $E2E_TEST_SCRIPT
  tags:
    - *runner_name
  rules:
    - if: $E2E_TEST_POWERSHELL

# NOTE: please do not disable these destroy jobs as it will leave resources behind
# incurring cloud charges and time to manually clean up.
e2e:destroy: &destroy
  stage: destroy
  extends:
    - .e2e:terraform:base
  interruptible: false
  environment:
    action: stop
  when: always
  script:
    - mage -t 1h terraform:initAndDestroy "${E2E_TEST_DIR}"

e2e:destroy:manual:
  <<: *destroy
  when: manual
  needs: []
