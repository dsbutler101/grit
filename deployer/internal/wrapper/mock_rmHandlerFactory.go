// Code generated by mockery v2.43.0. DO NOT EDIT.

package wrapper

import mock "github.com/stretchr/testify/mock"

// mockRmHandlerFactory is an autogenerated mock type for the rmHandlerFactory type
type mockRmHandlerFactory struct {
	mock.Mock
}

type mockRmHandlerFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRmHandlerFactory) EXPECT() *mockRmHandlerFactory_Expecter {
	return &mockRmHandlerFactory_Expecter{mock: &_m.Mock}
}

// new provides a mock function with given fields: _a0
func (_m *mockRmHandlerFactory) new(_a0 string) rmHandler {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for new")
	}

	var r0 rmHandler
	if rf, ok := ret.Get(0).(func(string) rmHandler); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(rmHandler)
		}
	}

	return r0
}

// mockRmHandlerFactory_new_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'new'
type mockRmHandlerFactory_new_Call struct {
	*mock.Call
}

// new is a helper method to define mock.On call
//   - _a0 string
func (_e *mockRmHandlerFactory_Expecter) new(_a0 interface{}) *mockRmHandlerFactory_new_Call {
	return &mockRmHandlerFactory_new_Call{Call: _e.mock.On("new", _a0)}
}

func (_c *mockRmHandlerFactory_new_Call) Run(run func(_a0 string)) *mockRmHandlerFactory_new_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *mockRmHandlerFactory_new_Call) Return(_a0 rmHandler) *mockRmHandlerFactory_new_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRmHandlerFactory_new_Call) RunAndReturn(run func(string) rmHandler) *mockRmHandlerFactory_new_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRmHandlerFactory creates a new instance of mockRmHandlerFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRmHandlerFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRmHandlerFactory {
	mock := &mockRmHandlerFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
