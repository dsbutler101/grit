// Code generated by mockery v2.43.0. DO NOT EDIT.

package ssh

import (
	context "context"
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// MockDialer is an autogenerated mock type for the Dialer type
type MockDialer struct {
	mock.Mock
}

type MockDialer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDialer) EXPECT() *MockDialer_Expecter {
	return &MockDialer_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockDialer) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDialer_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDialer_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDialer_Expecter) Close() *MockDialer_Close_Call {
	return &MockDialer_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDialer_Close_Call) Run(run func()) *MockDialer_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDialer_Close_Call) Return(_a0 error) *MockDialer_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDialer_Close_Call) RunAndReturn(run func() error) *MockDialer_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Dial provides a mock function with given fields: network, address
func (_m *MockDialer) Dial(network string, address string) (net.Conn, error) {
	ret := _m.Called(network, address)

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (net.Conn, error)); ok {
		return rf(network, address)
	}
	if rf, ok := ret.Get(0).(func(string, string) net.Conn); ok {
		r0 = rf(network, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(network, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDialer_Dial_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dial'
type MockDialer_Dial_Call struct {
	*mock.Call
}

// Dial is a helper method to define mock.On call
//   - network string
//   - address string
func (_e *MockDialer_Expecter) Dial(network interface{}, address interface{}) *MockDialer_Dial_Call {
	return &MockDialer_Dial_Call{Call: _e.mock.On("Dial", network, address)}
}

func (_c *MockDialer_Dial_Call) Run(run func(network string, address string)) *MockDialer_Dial_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockDialer_Dial_Call) Return(_a0 net.Conn, _a1 error) *MockDialer_Dial_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDialer_Dial_Call) RunAndReturn(run func(string, string) (net.Conn, error)) *MockDialer_Dial_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *MockDialer) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDialer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockDialer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDialer_Expecter) Start(ctx interface{}) *MockDialer_Start_Call {
	return &MockDialer_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *MockDialer_Start_Call) Run(run func(ctx context.Context)) *MockDialer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDialer_Start_Call) Return(_a0 error) *MockDialer_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDialer_Start_Call) RunAndReturn(run func(context.Context) error) *MockDialer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Wait provides a mock function with given fields:
func (_m *MockDialer) Wait() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Wait")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDialer_Wait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wait'
type MockDialer_Wait_Call struct {
	*mock.Call
}

// Wait is a helper method to define mock.On call
func (_e *MockDialer_Expecter) Wait() *MockDialer_Wait_Call {
	return &MockDialer_Wait_Call{Call: _e.mock.On("Wait")}
}

func (_c *MockDialer_Wait_Call) Run(run func()) *MockDialer_Wait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDialer_Wait_Call) Return(_a0 error) *MockDialer_Wait_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDialer_Wait_Call) RunAndReturn(run func() error) *MockDialer_Wait_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDialer creates a new instance of MockDialer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDialer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDialer {
	mock := &MockDialer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
