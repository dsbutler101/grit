// Code generated by mockery v2.43.0. DO NOT EDIT.

package wrapper

import (
	api "gitlab.com/gitlab-org/gitlab-runner/helpers/runner_wrapper/api"
	client "gitlab.com/gitlab-org/gitlab-runner/helpers/runner_wrapper/api/client"

	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// mockGrpcClient is an autogenerated mock type for the grpcClient type
type mockGrpcClient struct {
	mock.Mock
}

type mockGrpcClient_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGrpcClient) EXPECT() *mockGrpcClient_Expecter {
	return &mockGrpcClient_Expecter{mock: &_m.Mock}
}

// CheckStatus provides a mock function with given fields: _a0
func (_m *mockGrpcClient) CheckStatus(_a0 context.Context) (client.CheckStatusResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CheckStatus")
	}

	var r0 client.CheckStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (client.CheckStatusResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) client.CheckStatusResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(client.CheckStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGrpcClient_CheckStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckStatus'
type mockGrpcClient_CheckStatus_Call struct {
	*mock.Call
}

// CheckStatus is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockGrpcClient_Expecter) CheckStatus(_a0 interface{}) *mockGrpcClient_CheckStatus_Call {
	return &mockGrpcClient_CheckStatus_Call{Call: _e.mock.On("CheckStatus", _a0)}
}

func (_c *mockGrpcClient_CheckStatus_Call) Run(run func(_a0 context.Context)) *mockGrpcClient_CheckStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockGrpcClient_CheckStatus_Call) Return(_a0 client.CheckStatusResponse, _a1 error) *mockGrpcClient_CheckStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGrpcClient_CheckStatus_Call) RunAndReturn(run func(context.Context) (client.CheckStatusResponse, error)) *mockGrpcClient_CheckStatus_Call {
	_c.Call.Return(run)
	return _c
}

// ConnectWithTimeout provides a mock function with given fields: _a0, _a1
func (_m *mockGrpcClient) ConnectWithTimeout(_a0 context.Context, _a1 time.Duration) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ConnectWithTimeout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockGrpcClient_ConnectWithTimeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConnectWithTimeout'
type mockGrpcClient_ConnectWithTimeout_Call struct {
	*mock.Call
}

// ConnectWithTimeout is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 time.Duration
func (_e *mockGrpcClient_Expecter) ConnectWithTimeout(_a0 interface{}, _a1 interface{}) *mockGrpcClient_ConnectWithTimeout_Call {
	return &mockGrpcClient_ConnectWithTimeout_Call{Call: _e.mock.On("ConnectWithTimeout", _a0, _a1)}
}

func (_c *mockGrpcClient_ConnectWithTimeout_Call) Run(run func(_a0 context.Context, _a1 time.Duration)) *mockGrpcClient_ConnectWithTimeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(time.Duration))
	})
	return _c
}

func (_c *mockGrpcClient_ConnectWithTimeout_Call) Return(_a0 error) *mockGrpcClient_ConnectWithTimeout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGrpcClient_ConnectWithTimeout_Call) RunAndReturn(run func(context.Context, time.Duration) error) *mockGrpcClient_ConnectWithTimeout_Call {
	_c.Call.Return(run)
	return _c
}

// InitForcefulShutdown provides a mock function with given fields: _a0
func (_m *mockGrpcClient) InitForcefulShutdown(_a0 context.Context) (client.CheckStatusResponse, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for InitForcefulShutdown")
	}

	var r0 client.CheckStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (client.CheckStatusResponse, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) client.CheckStatusResponse); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(client.CheckStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGrpcClient_InitForcefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitForcefulShutdown'
type mockGrpcClient_InitForcefulShutdown_Call struct {
	*mock.Call
}

// InitForcefulShutdown is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *mockGrpcClient_Expecter) InitForcefulShutdown(_a0 interface{}) *mockGrpcClient_InitForcefulShutdown_Call {
	return &mockGrpcClient_InitForcefulShutdown_Call{Call: _e.mock.On("InitForcefulShutdown", _a0)}
}

func (_c *mockGrpcClient_InitForcefulShutdown_Call) Run(run func(_a0 context.Context)) *mockGrpcClient_InitForcefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *mockGrpcClient_InitForcefulShutdown_Call) Return(_a0 client.CheckStatusResponse, _a1 error) *mockGrpcClient_InitForcefulShutdown_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGrpcClient_InitForcefulShutdown_Call) RunAndReturn(run func(context.Context) (client.CheckStatusResponse, error)) *mockGrpcClient_InitForcefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// InitGracefulShutdown provides a mock function with given fields: _a0, _a1
func (_m *mockGrpcClient) InitGracefulShutdown(_a0 context.Context, _a1 api.InitGracefulShutdownRequest) (client.CheckStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for InitGracefulShutdown")
	}

	var r0 client.CheckStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.InitGracefulShutdownRequest) (client.CheckStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.InitGracefulShutdownRequest) client.CheckStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(client.CheckStatusResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.InitGracefulShutdownRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockGrpcClient_InitGracefulShutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitGracefulShutdown'
type mockGrpcClient_InitGracefulShutdown_Call struct {
	*mock.Call
}

// InitGracefulShutdown is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 api.InitGracefulShutdownRequest
func (_e *mockGrpcClient_Expecter) InitGracefulShutdown(_a0 interface{}, _a1 interface{}) *mockGrpcClient_InitGracefulShutdown_Call {
	return &mockGrpcClient_InitGracefulShutdown_Call{Call: _e.mock.On("InitGracefulShutdown", _a0, _a1)}
}

func (_c *mockGrpcClient_InitGracefulShutdown_Call) Run(run func(_a0 context.Context, _a1 api.InitGracefulShutdownRequest)) *mockGrpcClient_InitGracefulShutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.InitGracefulShutdownRequest))
	})
	return _c
}

func (_c *mockGrpcClient_InitGracefulShutdown_Call) Return(_a0 client.CheckStatusResponse, _a1 error) *mockGrpcClient_InitGracefulShutdown_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockGrpcClient_InitGracefulShutdown_Call) RunAndReturn(run func(context.Context, api.InitGracefulShutdownRequest) (client.CheckStatusResponse, error)) *mockGrpcClient_InitGracefulShutdown_Call {
	_c.Call.Return(run)
	return _c
}

// newMockGrpcClient creates a new instance of mockGrpcClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGrpcClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockGrpcClient {
	mock := &mockGrpcClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
