e2e:
  stage: e2e
  extends:
    - .rules:merge_request_pipelines:e2e
  variables:
    E2E_TEST_ID: ${CI_PIPELINE_ID}
  parallel:
    # Note: generated job names are limited to 255 characters which include
    # variable values.
    # Create a separate trigger job if you need larger inputs.
    matrix:
      - &aws_params
        E2E_TEST_NAME: aws
        E2E_TEST_DIR: e2e/aws
        E2E_TEST_SCRIPT: 'curl http://169.254.169.254/latest/meta-data/instance-id'
      - <<: *aws_params
        E2E_TEST_NAME: aws-arm
        TF_VAR_ami_arch: arm64
      - <<: *aws_params
        E2E_TEST_NAME: aws-wrap
        TF_VAR_enable_runner_wrapper: "true"
      - E2E_TEST_NAME: google
        E2E_TEST_DIR: e2e/google
        E2E_TEST_SCRIPT: 'curl -s -H "Metadata-Flavor: Google" http://169.254.169.254/computeMetadata/v1/instance/name'
      - E2E_TEST_NAME: gke-win
        E2E_TEST_DIR: e2e/google/gke-windows
        E2E_TEST_SCRIPT: 'curl "http://169.254.169.254/computeMetadata/v1/instance/name" -Headers @{"Metadata-Flavor"="Google"} -UseBasicParsing'
        E2E_TEST_POWERSHELL: y
  trigger:
    include: .gitlab/ci/e2e-pipeline.gitlab-ci.yml
    strategy: depend

# clean up old terraform states, limited to first 100 each run
# ignores the "default" state and targets all "^u[0-9]" states
# and states created in the last 24 hours
e2e:state-clean:
  stage: e2e
  extends:
    - .rules:merge_request_pipelines:e2e
  resource_group: $CI_JOB_NAME_SLUG
  variables:
    GITLAB_USER: $GITLAB_USER_LOGIN
  script:
    # graphql query
    - |
      query="{
        project(fullPath: \"gitlab-org/ci-cd/runner-tools/grit\") {
          terraformStates(first: 100) {
            nodes {
              name
              createdAt
            }
          }
        }
      }"
    - |
      data="$(gojq -nc --arg q "$query" '{"query": $q}')"
    - > 
      resp="$(curl "https://gitlab.com/api/graphql?private_token=${GITLAB_TOKEN_TERRAFORM}"
      -H "Content-Type: application/json" -X POST -d "$data")"
    # filter out non-e2e states and states those created in last 24 hours
    - >
      states="$(echo "$resp" | gojq -r '.data.project.terraformStates.nodes[] |
      select((.name | test("^u[0-9]")) and (now - (.createdAt | fromdate) > 86400)) | .name')"
    # destroy
    - |
      for state in $states; do
        echo "Destroying terraform state $state"
        export TF_STATE_NAME="$state"
        ./scripts/e2e-destroy.sh
      done
