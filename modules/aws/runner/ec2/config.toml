concurrent = ${concurrent}
%{ if enable_metrics_export == true }
listen_address = "${metrics_export_endpoint}"
%{ endif }

[[runners]]
    name = "${runner_name}"
    url = "${gitlab_url}"
    token = "${runner_token}"
    executor = "${executor}"

%{ if executor == "docker-autoscaler" || executor == "instance" }
    shell = "sh" # use powershell or pwsh for Windows AMIs

    # uncomment for Windows AMIs when the Runner manager is hosted on Linux
    # environment = ["FF_USE_POWERSHELL_PATH_RESOLVER=1"]

    # Docker Executor config
    [runners.docker]
        image = "${default_docker_image}"
%{ if privileged == true }
        tls_verify = false
        privileged = true
        disable_cache = false
        volumes = ["/certs/client", "/cache"]
%{ endif }

    # Autoscaler config
    [runners.autoscaler]
        plugin = "aws:${aws_plugin_version}"

        capacity_per_instance = ${capacity_per_instance}
        max_use_count = ${max_use_count}
        max_instances = ${scale_max}

        [runners.autoscaler.plugin_config]
            name             = "${aws_asg_name}"          # AWS Autoscaling Group name
            profile          = "default"                  # optional, default is 'default'
            config_file      = "/root/.aws/config"        # optional, default is '~/.aws/config'
            credentials_file = "/root/.aws/credentials"   # optional, default is '~/.aws/credentials'
            region           = "${region}"                # required

        [runners.autoscaler.connector_config]
            username          = "${username}"
            use_external_addr = true
            key_path          = "/etc/gitlab-runner/keypair.pem"

        [[runners.autoscaler.policy]]
            idle_count = ${idle_count}
            idle_time = "20m0s"
            scale_factor = ${idle_percentage}
%{ endif }

%{ if s3_cache.enabled == true }
    [runners.cache]
        Type = "s3"
        Shared = true
        [runners.cache.s3]
            ServerAddress = "${s3_cache.server_address}"
            BucketName = "${s3_cache.bucket_name}"
            BucketLocation = "${s3_cache.bucket_location}"
            AccessKey = "${s3_cache.access_key_id}"
            SecretKey = "${s3_cache.secret_access_key}"
            Insecure = false
%{ endif }
%{if length(acceptable_durations) > 0 }
    [runners.monitoring]
%{for duration in acceptable_durations }
        [[runners.monitoring.job_queuing_durations]]
            periods = ${jsonencode(duration.periods)}
            timezone = "${duration.timezone}"
            threshold = "${duration.threshold}"
%{ endfor }
%{ endif }

%{ if usage_logger.enabled == true }
[experimental]
  [experimental.usage_logger]
    enabled = true
    log_dir = "${usage_logger.log_dir}"

    [experimental.usage_logger.labels]
    %{ for key, value in usage_logger.custom_labels }
        ${key} = "${value}"
    %{ endfor }
%{ endif }
