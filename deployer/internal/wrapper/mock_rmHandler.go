// Code generated by mockery v2.43.0. DO NOT EDIT.

package wrapper

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	terraform "gitlab.com/gitlab-org/ci-cd/runner-tools/grit/deployer/internal/terraform"
)

// mockRmHandler is an autogenerated mock type for the rmHandler type
type mockRmHandler struct {
	mock.Mock
}

type mockRmHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRmHandler) EXPECT() *mockRmHandler_Expecter {
	return &mockRmHandler_Expecter{mock: &_m.Mock}
}

// handle provides a mock function with given fields: _a0, _a1, _a2
func (_m *mockRmHandler) handle(_a0 context.Context, _a1 terraform.RunnerManager, _a2 CallbackFn) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for handle")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, terraform.RunnerManager, CallbackFn) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockRmHandler_handle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'handle'
type mockRmHandler_handle_Call struct {
	*mock.Call
}

// handle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 terraform.RunnerManager
//   - _a2 CallbackFn
func (_e *mockRmHandler_Expecter) handle(_a0 interface{}, _a1 interface{}, _a2 interface{}) *mockRmHandler_handle_Call {
	return &mockRmHandler_handle_Call{Call: _e.mock.On("handle", _a0, _a1, _a2)}
}

func (_c *mockRmHandler_handle_Call) Run(run func(_a0 context.Context, _a1 terraform.RunnerManager, _a2 CallbackFn)) *mockRmHandler_handle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(terraform.RunnerManager), args[2].(CallbackFn))
	})
	return _c
}

func (_c *mockRmHandler_handle_Call) Return(_a0 error) *mockRmHandler_handle_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockRmHandler_handle_Call) RunAndReturn(run func(context.Context, terraform.RunnerManager, CallbackFn) error) *mockRmHandler_handle_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRmHandler creates a new instance of mockRmHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRmHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRmHandler {
	mock := &mockRmHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
